<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>resource</name>
    <filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
    <fileName>${ClassName}Resource.java</fileName>
    <content><![CDATA[
/**
 * Copyright &copy; 2018 <a href="https://github.com/somewhereMrli/jqmkj-boot">jqmkj-boot</a> All rights reserved.
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import com.jqmkj.java.common.security.SecurityUtil;
import com.jqmkj.java.util.StringUtil;
import com.google.common.collect.Lists;
import ${packageName}.${moduleName}.domain.vo<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Vo;
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;
import com.jqmkj.java.util.JsonUtil;
import com.jqmkj.java.util.PublicUtil;
import com.jqmkj.java.util.domain.Globals;
import com.jqmkj.java.util.domain.PageModel;
import com.jqmkj.java.util.exception.RuntimeMsgException;
import com.jqmkj.java.web.rest.ResultBuilder;
import com.jqmkj.java.web.rest.base.DataVoResource;
import com.alibaba.fastjson.JSON;
import com.codahale.metrics.annotation.Timed;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import javax.validation.Valid;

/**
 * ${functionName}Controller ${functionNameSimple}
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${jqmkj.adminPath}"}/${urlPrefix}")
public class ${ClassName}Resource extends DataVoResource<${ClassName}Service, ${ClassName}Vo> {

   public ${ClassName}Resource(${ClassName}Service ${className}Service) {
        super(${className}Service);
    }
	@GetMapping(value = "/")
	@Timed
	public String list() {
		return "${lastPackageName}/${viewPrefix}List";
	}

	/**
	 * GET / : get all ${className}.
	 *
	 * @param pm
	 *            the pagination information
	 * @return the ResponseEntity with status 200 (OK) and with body all ${className}
	 */
	@GetMapping(value = "/page")
	@Timed
	public ResponseEntity getPage(PageModel pm) {
	    service.findPage(pm, SecurityUtil.dataScopeFilter());
		JSON json = JsonUtil.getInstance().setRecurrenceStr(<#assign firstListField = true><#list table.columnList as column><#if column.simpleJavaType == "User" || column.simpleJavaType == "Org" || column.simpleJavaType == "Area"><#if !firstListField>, </#if>"<#if column.name == 'created_by'>creator<#elseif column.name == 'last_modified_by'>modifier<#else>${column.simpleJavaField}</#if>_${column.defaultJavaFieldName}"<#assign firstListField = false></#if></#list>).toJsonObject(pm);
		return ResultBuilder.buildObject(json);
	}

	@GetMapping(value = "/edit")
	@Timed
	public String form(${ClassName}Vo ${className}Vo) {
		if(${className}Vo == null){
			throw new RuntimeMsgException(PublicUtil.toAppendStr("查询${functionNameSimple}失败，原因：无法查找到编号为[", request().getParameter("id"), "]的${functionNameSimple}"));
		}
		return "${lastPackageName}/${viewPrefix}Form";
	}

	/**
	 * POST / : Save a ${className}Vo.
	 *
	 * @param ${className}Vo the HTTP ${className}
	 */
	@PostMapping(value = "/edit", produces = MediaType.APPLICATION_JSON_VALUE)
	@Timed
	public ResponseEntity save(@Valid @RequestBody ${ClassName}Vo ${className}Vo) {
		log.debug("REST request to save ${ClassName}Form : {}", ${className}Vo);
        service.checkProperty(${className}Vo);
		service.save(${className}Vo);
		return ResultBuilder.buildOk("保存${functionNameSimple}成功");

	}

	/**
	 * DELETE //:id : delete the "id" ${ClassName}.
	 *
	 * @param ids the id of the ${className} to delete
	 * @return the ResponseEntity with status 200 (OK)
	 */
	@PostMapping(value = "/delete/{ids:" + Globals.LOGIN_REGEX
			+ "}", produces = MediaType.APPLICATION_JSON_VALUE)
	@Timed
	public ResponseEntity delete(@PathVariable String ids) {
		log.debug("REST request to delete ${ClassName}: {}", ids);
		service.deleteBatchIds(Lists.newArrayList(ids.split(StringUtil.SPLIT_DEFAULT)));
		return ResultBuilder.buildOk("删除${functionNameSimple}成功");
	}
	/**
	 * lock //:id : lockOrUnLock the "id" ${ClassName}.
	 *
	 * @param ids the id of the ${className} to lock
	 * @return the ResponseEntity with status 200 (OK)
	 */
	@PostMapping(value = "/lock/{ids:" + Globals.LOGIN_REGEX
			+ "}", produces = MediaType.APPLICATION_JSON_VALUE)
	@Timed
	public ResponseEntity lockOrUnLock(@PathVariable String ids) {
		log.debug("REST request to lockOrUnLock ${ClassName}: {}", ids);
		service.lockOrUnLock(Lists.newArrayList(ids.split(StringUtil.SPLIT_DEFAULT)));
		return ResultBuilder.buildOk("操作${functionNameSimple}成功");
	}

}]]>
    </content>
</template>
