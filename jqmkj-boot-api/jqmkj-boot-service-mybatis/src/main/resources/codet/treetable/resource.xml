<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>resource</name>
    <filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
    <fileName>${ClassName}Resource.java</fileName>
    <content><![CDATA[
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import com.jqmkj.java.common.security.SecurityUtil;
import ${packageName}.${moduleName}.domain.vo<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Vo;
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;
import com.jqmkj.java.util.JsonUtil;
import com.jqmkj.java.util.PublicUtil;
import com.jqmkj.java.util.StringUtil;
import com.jqmkj.java.util.domain.Globals;
import com.jqmkj.java.util.domain.PageModel;
import com.jqmkj.java.util.exception.RuntimeMsgException;
import com.jqmkj.java.vo.sys.query.TreeQuery;
import com.jqmkj.java.vo.sys.query.TreeResult;
import com.jqmkj.java.web.rest.ResultBuilder;
import com.jqmkj.TreeVoResource;
import com.alibaba.fastjson.JSON;
import com.codahale.metrics.annotation.Timed;
import com.google.common.collect.Lists;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;


/**
 * ${functionName}Controller ${functionNameSimple}
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${jqmkj.adminPath}"}/${urlPrefix}")
public class ${ClassName}Resource extends TreeVoResource<${ClassName}Service, ${ClassName}Vo> {

    /**
	 * GET / : 获取树型结构数据 ${functionNameSimple}.
	 *
	 * @param treeQuery
	 * @return the ResponseEntity with status 200 (OK) and with body all ${className}
	 */
	@GetMapping(value = "findTreeData")
	public ResponseEntity findTreeData(TreeQuery treeQuery) {
		List<TreeResult> treeResultList = service.findTreeData(treeQuery);
		return ResultBuilder.buildOk(treeResultList);
	}
	/**
	 * GET / : 获取分页界面 ${functionNameSimple}.
	 *
	 */
	@GetMapping(value = "/")
	public String list() {
		return "${lastPackageName}/${viewPrefix}List";
	}

	/**
	 * GET / : 获取分页数据源 ${functionNameSimple}.
	 *
	 * @param pm the pagination information
	 * @return the ResponseEntity with status 200 (OK) and with body all ${className}
	 */
	@GetMapping(value = "/page")
	@Timed
	public ResponseEntity getPage(PageModel pm) {
	    service.findPage(pm, SecurityUtil.dataScopeFilter());
		JSON json = JsonUtil.getInstance().setRecurrenceStr(<#assign firstListField = true><#list table.columnList as column><#if column.simpleJavaType == "User" || column.simpleJavaType == "Org" || column.simpleJavaType == "Area"><#if !firstListField>, </#if>"<#if column.name == 'created_by'>creator<#elseif column.name == 'last_modified_by'>modifier<#else>${column.simpleJavaField}</#if>_${column.defaultJavaFieldName}"<#assign firstListField = false></#if></#list>).toJsonObject(pm);
		return ResultBuilder.buildObject(json);
	}

    /**
	 * GET / : 保存 a ${functionNameSimple}Vo 页.
	 *
	 * @param ${className}Vo
	 */
	@GetMapping(value = "/edit")
	@Timed
	public String form(${ClassName}Vo ${className}Vo) {
		if (${className}Vo == null) {
            throw new RuntimeMsgException(PublicUtil.toAppendStr("查询模块管理失败，原因：无法查找到编号区域"));
        }
        if (PublicUtil.isNotEmpty(${className}Vo.getParentId())) {
            service.findOptionalTopByParentId(${className}Vo.getParentId()).ifPresent(item ->{
                if(PublicUtil.isEmpty(${className}Vo.getId()))${className}Vo.setSort(item.getSort() + 30);
            });
            service.findOneById(${className}Vo.getParentId()).ifPresent(item -> ${className}Vo.setParentName(item.getName()));
        }
        if (${className}Vo.getSort() == null) {
            ${className}Vo.setSort(30);
        }
		return "${lastPackageName}/${viewPrefix}Form";
	}

	/**
	 * POST / : 保存 a ${functionNameSimple}Vo.
	 *
	 * @param {className}Vo
	 */
	@PostMapping(value = "/edit", produces = MediaType.APPLICATION_JSON_VALUE)
	@Timed
	public ResponseEntity save(@Valid @RequestBody ${ClassName}Vo ${className}Vo) {
		log.debug("REST request to save ${ClassName} : {}", ${className}Vo);

        service.checkProperty(${className}Vo);
		service.save(${className}Vo);
        return ResultBuilder.buildOk("保存${functionNameSimple}成功");
	}

	/**
	 * DELETE //:id : delete the "id" ${ClassName}.
	 *
	 * @param ids the id of the ${className} to delete
	 * @return the ResponseEntity with status 200 (OK)
	 */
	@PostMapping(value = "/delete/{ids:" + Globals.LOGIN_REGEX
			+ "}", produces = MediaType.APPLICATION_JSON_VALUE)
	@Timed
	public ResponseEntity delete(@PathVariable String ids) {
		log.debug("REST request to delete ${ClassName}: {}", ids);
        service.deleteByParentIds(Lists.newArrayList(ids.split(StringUtil.SPLIT_DEFAULT)), SecurityUtil.getCurrentUserId());
		return ResultBuilder.buildOk("删除${functionNameSimple}成功");
	}
	/**
	 * lock //:id : lockOrUnLock the "id" ${ClassName}.
	 *
	 * @param ids the id of the ${className} to lock
	 * @return the ResponseEntity with status 200 (OK)
	 */
	@PostMapping(value = "/lock/{ids:" + Globals.LOGIN_REGEX
			+ "}", produces = MediaType.APPLICATION_JSON_VALUE)
	@Timed
	public ResponseEntity lockOrUnLock(@PathVariable String ids) {
		log.debug("REST request to lockOrUnLock ${ClassName}: {}", ids);
		service.lockOrUnLock(Lists.newArrayList(ids.split(StringUtil.SPLIT_DEFAULT)));
		return ResultBuilder.buildOk("操作${functionNameSimple}成功");
	}

}]]>
    </content>
</template>
